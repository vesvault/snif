#!/usr/bin/perl

#/**************************************************************************
# *     _________
# *    /````````_\                  S N I F ~ e2e TLS trust for IoT
# *   /\     , / O\      ___
# *  | |     | \__|_____/  o\       e2e TLS SNI Forwarder
# *  | |     |  ``/`````\___/       e2e TLS CA Proxy
# *  | |     | . | <"""""""~~
# *  |  \___/ ``  \________/        https://snif.host
# *   \  '''  ``` /````````         (C) 2021 VESvault Corp
# *    \_________/                  Jim Zubov <jz@vesvault.com>
# *
# *
# * GNU General Public License v3
# * You may opt to use, copy, modify, merge, publish, distribute and/or sell
# * copies of the Software, and permit persons to whom the Software is
# * furnished to do so, under the terms of the COPYING file.
# *
# * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
# * KIND, either express or implied.
# *
# **************************************************************************/

use Net::APNS::Simple;
use MIME::Base64;

$BaseDir = `. /etc/snif.conf; echo -n \$SNIF_CA_PROXY;`;

$EtcDir = "$BaseDir/etc";
$ApnsDir = "$BaseDir/apns";
$LogDir = "$BaseDir/log";
$CtlFifo ="$BaseDir/var/snifd-out-apnsd.ctl";

# APNS configuration
$BundleId = "com.example.app";
$TeamId = "ABCD123456";
$Prod = 1;


$ResendAfter = 20;
$MaskChars = 7;

$Apns;
%Atime;

sub apns_send {
    my ($token, $msg) = @_;
    my $crtf = $Prod ? "apns" : "apns-dev";
    if (!$Apns) {
	$Apns = Net::APNS::Simple->new(
	    development => !$Prod,
	    cert_file => "$EtcDir/$crtf.cer",
	    key_file => "$EtcDir/$crtf.key",
	    bundle_id => $BundleId,
	    apns_push_type => "alert",
	);
    }
    return if !$Apns;
    $Apns->prepare($token, {aps => {
	alert => { title => "Connection from an app", body => $msg },
	'content-available' => 1
    }}, sub {
	apns_rspfn($_[0], $_[1], $token);
    });
}

sub apns_rspfn {
    my ($hdrs, $body, $token) = @_;
    my %hdrs = @$hdrs;
    return if $hdrs{':status'} == 200;
    dlog(STDERR, "apns_rspfn");
    for (keys %hdrs) {
	print STDERR "$_: $hdrs{$_}\n";
    }
    print STDERR "$body\n\n";
}

sub apns_commit {
    $Apns->notify() || undef($Apns);
}

sub apns_fname {
    my ($host) = @_;
    return "$ApnsDir/_" . substr($host, $MaskChars) . ".apns";
}

sub host_set_apns {
    my ($host, $apns) = @_;
    open APNS, ">" . apns_fname($host);
    print APNS $apns;
    close APNS;
}

sub host_check {
    my ($host, $connid) = @_;
    my $t0 = time - $ResendAfter;
    return if $Atime{$host} > $t0;
    my $apnsf = apns_fname($host);
    my @st = stat $apnsf;
    return if !@st || $st[8] > $t0;
    return if !open APNS, $apnsf;
    my $apns = <APNS>;
    chomp $apns;
    close APNS;
    apns_send($apns, "SNIF connection $connid");
    apns_commit();
    $Atime{$host} = time;
}

sub dlog {
    my ($log, $msg) = @_;
    my @t = localtime;
    printf $log "%02d/%02d/%02d %02d:%02d:%02d [%d]: %s\n", $t[4] + 1, $t[3], $t[5] % 100, $t[2], $t[1], $t[0], $$, $msg;
}


close STDERR;
open STDERR, ">>$LogDir/log_snif-apnsd";
select STDERR;
$| = 1;
dlog(STDERR, "starting snif-apnsd");


while (1) {
    if (!open(CTL, $CtlFifo)) {
	sleep(2);
	next;
    }
    while (<CTL>) {
	if (/^SNIF MSG ((\w[\-\.]?)+\w) apns=(\S+)/) {
	    host_set_apns($1, $3);
	} elsif (/^SNIF CONNECT (\S+) ((\w[\-\.]?)+\w)\:/) {
	    host_check($2, $1);
	}
    }
    close CTL;
}

